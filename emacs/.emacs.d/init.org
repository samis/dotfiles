
* init.el

** Correctly set the load-path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
#+END_SRC

** Set the list of packages to be loaded
#+BEGIN_SRC emacs-lisp
  (setq my-packages '(el-get
                      better-defaults
                      req-package
                      org-mode))
#+END_SRC
** Load all of my random lisp libraries.
#+BEGIN_SRC emacs-lisp
  (defun my-load-all-in-directory (dir)
    "`load' all elisp libraries in directory DIR which are not already loaded."
    (interactive "D")
    (let ((libraries-loaded (mapcar #'file-name-sans-extension
                                    (delq nil (mapcar #'car load-history)))))
      (dolist (file (directory-files dir t ".+\\.elc?$"))
        (let ((library (file-name-sans-extension file)))
          (unless (member library libraries-loaded)
            (load library nil t)
            (push library libraries-loaded))))))
  (my-load-all-in-directory "~/.emacs.d/lisp/")
#+END_SRC

** Set the correct font settings for use elsewhere in Emacs.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "PragmataPro" :height 98)
  (set-emoji-font nil)
  (add-hook 'after-make-frame-functions 'set-emoji-font)
  (add-hook 'eshell-mode-hook 'use-ohsnapu)
  (add-hook 'term-mode-hook 'use-ohsnapu)
#+END_SRC

** Configure built-in global minor modes
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
  (global-linum-mode t)
  (cua-mode 1)
  (global-visual-line-mode)
  (winner-mode 1)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

** Tweak some IDO settings
#+BEGIN_SRC emacs-lisp
  (setq ido-use-filename-at-point 'guess)
  (setq ido-use-virtual-buffers t)
#+END_SRC

** Add misc settings that don't really fit anywhere else
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq vc-follow-symlinks t)
  (ensure-server-is-running)
  (setq tab-always-indent 'complete)
  (global-set-key (kbd "C-x f") 'ido-find-file)
  (global-unset-key (kbd "<menu>"))
  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
#+END_SRC

** Set ELPA package archives
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Prepare el-get
#+BEGIN_SRC emacs-lisp
  (setq el-get-user-package-directory "~/.emacs.d/configuration")
  (ensure-el-get-is-present)
  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
  (setq el-get-packages
        (append my-packages
                (mapcar #'el-get-source-name el-get-sources)))
#+END_SRC

** Initialise abbrev-based auto-correction
#+BEGIN_SRC emacs-lisp
(define-key ctl-x-map "\C-i"
#'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
(car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
      (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
        (bef (downcase bef)))
        (define-abbrev
        (if p local-abbrev-table global-abbrev-table)
        bef aft)
        (message "\"%s\" now expands to \"%s\" %sally"
        bef aft (if p "loc" "glob")))
          (user-error "No typo at or before point"))))

(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)
#+END_SRC emacs-lisp
** Run el-get
#+BEGIN_SRC emacs-lisp
  (el-get 'sync my-packages)
  (package-initialize)
#+END_SRC
** Package Configuration
#+BEGIN_SRC emacs-lisp
(require 'req-package)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (req-package projectile
    :init 
    (setq projectile-indexing-method 'git)
    (setq projectile-enable-caching t)
    (setq projectile-keymap-prefix (kbd "<menu> p"))
    :config
    (projectile-global-mode t)
    :ensure t)
#+END_SRC
*** aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
  (req-package aggressive-indent
    :diminish aggressive-indent-mode
    :config
    (global-aggressive-indent-mode 1)
    :ensure t)
#+END_SRC
*** flx-ido
#+BEGIN_SRC emacs-lisp
  (req-package flx-ido
    :config
    (flx-ido-mode 1)
    :ensure t)
#+END_SRC
*** ido-ubiquitous
#+BEGIN_SRC emacs-lisp
  (req-package ido-ubiquitous
    :init
    (setq ido-ubiquitous-auto-update-overrides t)
    :config
    (ido-everywhere 1)
    (ido-ubiquitous-mode 1)
    :ensure t)
#+END_SRC
*** Smex
#+BEGIN_SRC emacs-lisp
  (req-package smex
    :bind ("M-x" . smex)
    :bind ("M-X" . smex-major-mode-commands)
    :bind ("C-c C-c M-x" . execute-extended-command)
    :config
    (smex-initialize)
    :ensure t)
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (req-package company
    :diminish company-mode
    :init
    (setq company-idle-delay 0.2)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    :ensure t)
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
  (req-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode t)
    (which-key-setup-side-window-bottom)
    :ensure t)
#+END_SRC
*** csv-mode
#+BEGIN_SRC emacs-lisp
  (req-package csv-mode
    :init
    (setq csv-separators '("," ";" ":"))
    :ensure t)
#+END_SRC
*** yaml-mode
#+BEGIN_SRC emacs-lisp
  (req-package yaml-mode
    :ensure t)
#+END_SRC
*** markdown-mode
#+BEGIN_SRC emacs-lisp
  (req-package markdown-mode
    :ensure t)
#+END_SRC
*** undo-tree
#+BEGIN_SRC emacs-lisp
  (req-package undo-tree
    :bind ("C-z" . undo-tree-undo)
    :config
    (global-undo-tree-mode 1)
    :ensure t)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (req-package magit
    :bind ("C-x g" . magit-status)
    :ensure t)
#+END_SRC
*** Geiser
#+BEGIN_SRC emacs-lisp
  (req-package geiser
    :ensure t)
#+END_SRC
*** info+
#+BEGIN_SRC emacs-lisp
  (req-package info+
    :init
    (setq Info-fontify-quotations-flag t)
    (setq Info-fontify-angle-bracketed-flag t)
    (setq Info-fontify-single-quote-flag t)
    :config 
    (define-key Info-mode-map [mouse-4]         'mwheel-scroll)
    (define-key Info-mode-map [mouse-5]         'mwheel-scroll)
    :ensure t)
#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
  (req-package diminish
    :config
    (diminish 'visual-line-mode)
    (diminish 'auto-revert-mode)
    (diminish 'abbrev-mode)
    (with-eval-after-load 'with-editor-mode
      (diminish 'with-editor-mode))
    (with-eval-after-load 'server
      (setq minor-mode-alist
            (delete '(server-buffer-clients " Server") minor-mode-alist)))
    (eval-after-load "org-indent"
      '(diminish 'org-indent-mode))
    :ensure t)
#+END_SRC
*** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (req-package sr-speedbar
    :init
    (setq sr-speedbar-width 40)
    (setq sr-speedbar-default-width 40)
    (setq sr-speedbar-max-width 40)
    (setq sr-speedbar-skip-other-window-p t)
    (setq sr-speedbar-right-side nil)
    (defun ad-advised-definition-p (definition)
      "Return non-nil if DEFINITION was generated from advice information."
      (if (or (ad-lambda-p definition)
              (macrop definition)
              (ad-compiled-p definition))
          (let ((docstring (ad-docstring definition)))
            (and (stringp docstring)
                 (get-text-property 0 'dynamic-docstring-function docstring)))))
    :config
    (sr-speedbar-open)
    (sr-speedbar-close)
    :ensure t)
#+END_SRC
*** Purpose
#+BEGIN_SRC emacs-lisp
  (req-package window-purpose
    :config
    (require 'window-purpose-x)
    (purpose-x-magit-single-on)
    (add-to-list 'purpose-user-mode-purposes '(org-mode . org))
    (add-to-list 'purpose-user-mode-purposes '(org-agenda-mode . org))
    (add-to-list 'purpose-user-mode-purposes '(speedbar-mode . sidebar))
    (purpose-compile-user-configuration)
    (purpose-mode)
    (purpose-load-window-layout "coding")
    :ensure t)
#+END_SRC
*** Monokai theme
#+BEGIN_SRC emacs-lisp
  (req-package monokai-theme
    :config
    (load-theme 'monokai t)
    :ensure t)
#+END_SRC
*** Spaceline
#+BEGIN_SRC emacs-lisp
  (req-package spaceline
    :init
    (setq powerline-default-separator 'wave)
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme)
    (spaceline-info-mode)
    :ensure t)
#+END_SRC
** Finish loading packages
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
** Load Custom settings
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/customize.el")
#+END_SRC
